Last login: Thu Oct 11 00:27:23 on console

 2018-10-11 01:49:29 ⌚  Marcs-MBP in ~
○ → cd Documents/cs61afall2018/

 2018-10-11 01:49:39 ⌚  Marcs-MBP in ~/Documents/cs61afall2018
○ → cd code/hog/

 2018-10-11 01:49:45 ⌚  Marcs-MBP in ~/Documents/cs61afall2018/code/hog
± |master ?:1 ✗| → python3 ok -u
=====================================================================
Assignment: Project 1: Hog
OK, version v1.13.11
=====================================================================

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Unlocking tests

At each "? ", type what you would expect the output to be.
Type exit() to quit

---------------------------------------------------------------------
Question 0 > Suite 1 > Case 1
(cases remaining: 2)

>>> from hog import *
>>> test_dice = make_test_dice(4, 1, 2)
>>> test_dice()
? 4
-- OK! --

>>> test_dice() # Second call
? 1
-- OK! --

>>> test_dice() # Third call
? 2
-- OK! --

>>> test_dice() # Fourth call
? 4
-- OK! --

---------------------------------------------------------------------
Question 0 > Suite 2 > Case 1
(cases remaining: 1)

Q: Which of the following is the correct way to "roll" a fair, six-sided die?
Choose the number of the correct choice:
0) six_sided
1) six_sided()
2) make_test_dice(6)
3) make_fair_dice(6)
? 1
-- OK! --

---------------------------------------------------------------------
OK! All cases for Question 0 unlocked.

---------------------------------------------------------------------
Question 1 > Suite 1 > Case 1
(cases remaining: 9)

>>> from hog import *
>>> roll_dice(2, make_test_dice(4, 6, 1))
? 10
-- OK! --

---------------------------------------------------------------------
Question 1 > Suite 1 > Case 2
(cases remaining: 8)

>>> from hog import *
>>> roll_dice(3, make_test_dice(4, 6, 1))
? 1
-- OK! --

---------------------------------------------------------------------
Question 1 > Suite 1 > Case 3
(cases remaining: 7)

>>> from hog import *
>>> roll_dice(4, make_test_dice(2, 2, 3))
? 9
-- OK! --

---------------------------------------------------------------------
Question 1 > Suite 1 > Case 4
(cases remaining: 6)

>>> from hog import *
>>> roll_dice(4, make_test_dice(1, 2, 3))
? 1
-- OK! --

---------------------------------------------------------------------
Question 1 > Suite 1 > Case 5
(cases remaining: 5)

>>> from hog import *
>>> counted_dice = make_test_dice(4, 1, 2, 6)
>>> roll_dice(3, counted_dice)
? 1
-- OK! --

>>> roll_dice(1, counted_dice)  # Make sure you call dice exactly num_rolls times!
? 6
-- OK! --

---------------------------------------------------------------------
Question 1 > Suite 1 > Case 6
(cases remaining: 4)

>>> from hog import *
>>> roll_dice(9, make_test_dice(6))
? 54
-- OK! --

>>> roll_dice(7, make_test_dice(2, 2, 2, 2, 2, 2, 1))
? 1
-- OK! --

---------------------------------------------------------------------
Question 1 > Suite 2 > Case 1
(cases remaining: 3)

-- Already unlocked --

---------------------------------------------------------------------
Question 1 > Suite 2 > Case 2
(cases remaining: 2)

-- Already unlocked --

---------------------------------------------------------------------
Question 1 > Suite 2 > Case 3
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 1 unlocked.

---------------------------------------------------------------------
Question 2 > Suite 1 > Case 1
(cases remaining: 6)

>>> from hog import *
>>> free_bacon(35)
? 1
-- OK! --

---------------------------------------------------------------------
Question 2 > Suite 1 > Case 2
(cases remaining: 5)

>>> from hog import *
>>> free_bacon(71)
? 13
-- OK! --

---------------------------------------------------------------------
Question 2 > Suite 1 > Case 3
(cases remaining: 4)

>>> from hog import *
>>> free_bacon(7)
? 1
-- OK! --

---------------------------------------------------------------------
Question 2 > Suite 1 > Case 4
(cases remaining: 3)

>>> from hog import *
>>> free_bacon(17)
? 1
-- OK! --

---------------------------------------------------------------------
Question 2 > Suite 1 > Case 5
(cases remaining: 2)

>>> from hog import *
>>> free_bacon(0)
? 1
-- OK! --

---------------------------------------------------------------------
Question 2 > Suite 1 > Case 6
(cases remaining: 1)

>>> from hog import *
>>> free_bacon(10)
? 2
-- OK! --

---------------------------------------------------------------------
OK! All cases for Question 2 unlocked.

---------------------------------------------------------------------
Question 3 > Suite 1 > Case 1
(cases remaining: 10)

>>> from hog import *
>>> take_turn(2, 0, make_test_dice(4, 5, 1))
? 9
-- OK! --

---------------------------------------------------------------------
Question 3 > Suite 1 > Case 2
(cases remaining: 9)

>>> from hog import *
>>> take_turn(3, 0, make_test_dice(4, 6, 1))
? 1
-- OK! --

---------------------------------------------------------------------
Question 3 > Suite 1 > Case 3
(cases remaining: 8)

>>> from hog import *
>>> take_turn(0, 16)
? 1
-- OK! --

---------------------------------------------------------------------
Question 3 > Suite 1 > Case 4
(cases remaining: 7)

>>> from hog import *
>>> take_turn(0, 47)
? 1
-- OK! --

---------------------------------------------------------------------
Question 3 > Suite 1 > Case 5
(cases remaining: 6)

>>> from hog import *
>>> take_turn(0, 90)
? 18
-- OK! --

---------------------------------------------------------------------
Question 3 > Suite 1 > Case 6
(cases remaining: 5)

-- Already unlocked --

---------------------------------------------------------------------
Question 3 > Suite 1 > Case 7
(cases remaining: 4)

-- Already unlocked --

---------------------------------------------------------------------
Question 3 > Suite 1 > Case 8
(cases remaining: 3)

-- Already unlocked --

---------------------------------------------------------------------
Question 3 > Suite 1 > Case 9
(cases remaining: 2)

-- Already unlocked --

---------------------------------------------------------------------
Question 3 > Suite 2 > Case 1
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 3 unlocked.

---------------------------------------------------------------------
Question 4 > Suite 1 > Case 1
(cases remaining: 10)

>>> from hog import *
>>> is_swap(19, 91)
? True
-- OK! --

---------------------------------------------------------------------
Question 4 > Suite 1 > Case 2
(cases remaining: 9)

>>> from hog import *
>>> is_swap(91, 19)
? True
-- OK! --

---------------------------------------------------------------------
Question 4 > Suite 1 > Case 3
(cases remaining: 8)

>>> from hog import *
>>> is_swap(36, 13)
? False
-- OK! --

---------------------------------------------------------------------
Question 4 > Suite 1 > Case 4
(cases remaining: 7)

>>> from hog import *
>>> is_swap(1, 0)
? False
-- OK! --

---------------------------------------------------------------------
Question 4 > Suite 1 > Case 5
(cases remaining: 6)

>>> from hog import *
>>> is_swap(34, 45)
? True
-- OK! --

---------------------------------------------------------------------
Question 4 > Suite 1 > Case 6
(cases remaining: 5)

>>> from hog import *
>>> is_swap(30, 0)
? False
-- OK! --

---------------------------------------------------------------------
Question 4 > Suite 1 > Case 7
(cases remaining: 4)

>>> from hog import *
>>> is_swap(85, 3)
? True
-- OK! --

---------------------------------------------------------------------
Question 4 > Suite 1 > Case 8
(cases remaining: 3)

>>> from hog import *
>>> is_swap(51, 81)
? False
-- OK! --

---------------------------------------------------------------------
Question 4 > Suite 1 > Case 9
(cases remaining: 2)

>>> from hog import *
>>> is_swap(104, 40)
? True
-- OK! --

---------------------------------------------------------------------
Question 4 > Suite 1 > Case 10
(cases remaining: 1)

>>> from hog import *
>>> is_swap(82, 128)
? True
-- OK! --

---------------------------------------------------------------------
OK! All cases for Question 4 unlocked.

---------------------------------------------------------------------
Question 5 > Suite 1 > Case 1
(cases remaining: 12)

Q: The variables score0 and score1 are the scores for Player 0
and Player 1, respectively. Under what conditions should the
game continue?
Choose the number of the correct choice:
0) While score1 is less than goal
1) While score0 is less than goal
2) While score0 and score1 are both less than goal
3) While at least one of score0 or score1 is less than goal
? 2
-- OK! --

---------------------------------------------------------------------
Question 5 > Suite 1 > Case 2
(cases remaining: 11)

Q: What is a strategy in the context of this game?
Choose the number of the correct choice:
0) A function that returns the number of dice a player will roll
1) A player's desired turn outcome
2) The number of dice a player will roll
? 0
-- OK! --

---------------------------------------------------------------------
Question 5 > Suite 1 > Case 3
(cases remaining: 10)

Q: If strategy1 is Player 1's strategy function, score0 is
Player 0's current score, and score1 is Player 1's current
score, then which of the following demonstrates correct
usage of strategy1?
Choose the number of the correct choice:
0) strategy1(score0)
1) strategy1(score0, score1)
2) strategy1(score1, score0)
3) strategy1(score1)
? 2
-- OK! --

---------------------------------------------------------------------
Question 5 > Suite 2 > Case 1
(cases remaining: 9)

>>> import hog
>>> always_three = hog.make_test_dice(3)
>>> always = hog.always_roll
>>> #
>>> # Play function stops at goal
>>> s0, s1 = hog.play(always(5), always(3), score0=91, score1=10, dice=always_three)
>>> s0
? 106
-- OK! --

>>> s1
? 10
-- OK! --

---------------------------------------------------------------------
Question 5 > Suite 2 > Case 2
(cases remaining: 8)

>>> import hog
>>> always_three = hog.make_test_dice(3)
>>> always = hog.always_roll
>>> #
>>> # Goal score is not hardwired
>>> s0, s1 = hog.play(always(5), always(5), goal=10, dice=always_three)
>>> s0
? 15
-- OK! --

>>> s1
? 0
-- OK! --

---------------------------------------------------------------------
Question 5 > Suite 2 > Case 3
(cases remaining: 7)

>>> import hog
>>> always_three = hog.make_test_dice(3)
>>> always = hog.always_roll
>>> #
>>> # Goal score is not hardwired
>>> s0, s1 = hog.play(always(5), always(5), goal=15, dice=always_three)
>>> s0
? 15
-- OK! --

>>> s1
? 0
-- OK! --

---------------------------------------------------------------------
Question 5 > Suite 3 > Case 1
(cases remaining: 6)

>>> import hog
>>> always_three = hog.make_test_dice(3)
>>> always_seven = hog.make_test_dice(7)
>>> #
>>> # Use strategies
>>> # We recommend working this out turn-by-turn on a piece of paper.
>>> strat0 = lambda score, opponent: opponent % 10
>>> strat1 = lambda score, opponent: score // 10 - 2
>>> s0, s1 = hog.play(strat0, strat1, score0=61, score1=80, dice=always_seven)
>>> s0
? 8
-- Not quite. Try again! --

? 117
-- Not quite. Try again! --

? 77
-- Not quite. Try again! --

? 122
-- OK! --

>>> s1
? 77
-- OK! --

---------------------------------------------------------------------
Question 5 > Suite 4 > Case 1
(cases remaining: 5)

-- Already unlocked --

---------------------------------------------------------------------
Question 5 > Suite 4 > Case 2
(cases remaining: 4)

-- Already unlocked --

---------------------------------------------------------------------
Question 5 > Suite 4 > Case 3
(cases remaining: 3)

-- Already unlocked --

---------------------------------------------------------------------
Question 5 > Suite 4 > Case 4
(cases remaining: 2)

-- Already unlocked --

---------------------------------------------------------------------
Question 5 > Suite 5 > Case 1
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 5 unlocked.

---------------------------------------------------------------------
Question 6 > Suite 1 > Case 1
(cases remaining: 5)

>>> from hog import play, always_roll
>>> from dice import make_test_dice
>>> #
>>> def echo(s0, s1):
...     print(s0, s1)
...     return echo
>>> s0, s1 = play(always_roll(1), always_roll(1), dice=make_test_dice(3), goal=4, say=echo)
(line 1)? 3, 3
-- Not quite. Try again! --

(line 1)? 33
-- Not quite. Try again! --

(line 1)? 3,3
-- Not quite. Try again! --

(line 1)? 3
-- Not quite. Try again! --

(line 1)? 1, 1
-- Not quite. Try again! --

(line 1)? (3,3)
-- Not quite. Try again! --

(line 1)? (3, 3)
-- Not quite. Try again! --

(line 1)? (1, 1)
-- Not quite. Try again! --

(line 1)? (1,1)
-- Not quite. Try again! --

(line 1)? 3, 0
-- Not quite. Try again! --

(line 1)? 3 0
(line 2)? 3 3
(line 3)? 6 3
-- OK! --

---------------------------------------------------------------------
Question 6 > Suite 1 > Case 2
(cases remaining: 4)

>>> from hog import play, always_roll
>>> from dice import make_test_dice
>>> #
>>> def echo(s0, s1):
...     print(s0, s1)
...     return echo
>>> strat0 = lambda score, opponent: 1 - opponent // 10
>>> strat1 = always_roll(3)
>>> s0, s1 = play(strat0, strat1, dice=make_test_dice(4, 2, 4), goal=15, say=echo)
(line 1)? 4 0
(line 2)? 4 10
(line 3)? 6 10
(line 4)? 6 20
-- OK! --

---------------------------------------------------------------------
Question 6 > Suite 1 > Case 3
(cases remaining: 3)

>>> from hog import play, always_roll
>>> from dice import make_test_dice
>>> #
>>> # Ensure that say is properly updated within the body of play.
>>> def total(s0, s1):
...     print(s0 + s1)
...     return echo
>>> def echo(s0, s1):
...     print(s0, s1)
...     return total
>>> s0, s1 = play(always_roll(1), always_roll(1), dice=make_test_dice(2, 3), goal=5, say=echo)
(line 1)? 2
-- Not quite. Try again! --

(line 1)? 2 0
(line 2)? 4
-- Not quite. Try again! --

(line 1)? 5
-- Not quite. Try again! --

(line 1)? 2 2
-- Not quite. Try again! --

(line 1)? 5
-- Not quite. Try again! --

(line 1)? 2 0
(line 2)? 5
(line 3)? 4 3
(line 4)? 10
-- OK! --

---------------------------------------------------------------------
Question 6 > Suite 2 > Case 1
(cases remaining: 2)

>>> from hog import play, always_roll, both, announce_lead_changes, say_scores
>>> from dice import make_test_dice
>>> #
>>> def echo_0(s0, s1):
...     print('*', s0)
...     return echo_0
>>> def echo_1(s0, s1):
...     print('**', s1)
...     return echo_1
>>> s0, s1 = play(always_roll(1), always_roll(1), dice=make_test_dice(2), goal=1, say=both(echo_0, echo_1))
(line 1)? * 2 ** 0
-- Not quite. Try again! --

(line 1)? * 2
(line 2)? ** 2
-- Not quite. Try again! --

(line 1)? ** 0
-- Not quite. Try again! --

(line 1)? * 2
(line 2)? ** 0
-- OK! --

---------------------------------------------------------------------
Question 6 > Suite 2 > Case 2
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 6 unlocked.

---------------------------------------------------------------------
Question 7 > Suite 1 > Case 1
(cases remaining: 5)

Q: What does announce_highest return?
Choose the number of the correct choice:
0) A commentary function that prints information about the
   biggest point increase for the current player.
1) A string containing the largest point increase for the
   current player.
2) The current largest point increase between both
   players.
? 0
-- OK! --

---------------------------------------------------------------------
Question 7 > Suite 1 > Case 2
(cases remaining: 4)

Q: When does the commentary function returned by announce_highest
print something out?
Choose the number of the correct choice:
0) When the current player, given by the parameter `who`,
   earns the biggest point increase yet between both
   players in the game.
1) When the current player, given by the parameter `who`,
   earns their biggest point increase yet in the game.
2) After each turn.
? 1
-- OK! --

---------------------------------------------------------------------
Question 7 > Suite 1 > Case 3
(cases remaining: 3)

Q: What does the parameter previous_score represent?
Choose the number of the correct choice:
0) The current player's score before this turn.
1) The previous highest gain for the current player.
2) The opponent's score before this turn.
? 0
-- OK! --

---------------------------------------------------------------------
Question 7 > Suite 2 > Case 1
(cases remaining: 2)

-- Already unlocked --

---------------------------------------------------------------------
Question 7 > Suite 2 > Case 2
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 7 unlocked.

---------------------------------------------------------------------
Question 8 > Suite 1 > Case 1
(cases remaining: 5)

Q: What makes make_averaged a higher order function?
Choose the number of the correct choice:
0) It both takes in a function as an argument and returns a function
1) It uses the *args keyword
2) It returns a function
3) It takes in a function as an argument
? 0
-- OK! --

---------------------------------------------------------------------
Question 8 > Suite 1 > Case 2
(cases remaining: 4)

Q: How many arguments does the function passed into make_averaged take?
Choose the number of the correct choice:
0) An arbitrary amount, which is why we need to use *args to call it
1) Two
2) None
? 1
-- Not quite. Try again! --

Choose the number of the correct choice:
0) An arbitrary amount, which is why we need to use *args to call it
1) Two
2) None
? 0
-- OK! --

---------------------------------------------------------------------
Question 8 > Suite 2 > Case 1
(cases remaining: 3)

>>> from hog import *
>>> dice = make_test_dice(3, 1, 5, 6)
>>> averaged_dice = make_averaged(dice, 1000)
>>> # Average of calling dice 1000 times
>>> averaged_dice()
? 3.75
-- OK! --

---------------------------------------------------------------------
Question 8 > Suite 2 > Case 2
(cases remaining: 2)

>>> from hog import *
>>> dice = make_test_dice(3, 1, 5, 6)
>>> averaged_roll_dice = make_averaged(roll_dice, 1000)
>>> # Average of calling roll_dice 1000 times
>>> # Enter a float (e.g. 1.0) instead of an integer
>>> averaged_roll_dice(2, dice)
? 3.75
-- Not quite. Try again! --

? 6.0
-- OK! --

---------------------------------------------------------------------
Question 8 > Suite 3 > Case 1
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 8 unlocked.

---------------------------------------------------------------------
Question 9 > Suite 1 > Case 1
(cases remaining: 7)

Q: If multiple num_rolls are tied for the highest scoring
average, which should you return?
Choose the number of the correct choice:
0) A random num_rolls
1) The highest num_rolls
2) The lowest num_rolls
? 2
-- OK! --

---------------------------------------------------------------------
Question 9 > Suite 2 > Case 1
(cases remaining: 6)

>>> from hog import *
>>> dice = make_test_dice(3)   # dice always returns 3
>>> max_scoring_num_rolls(dice, num_samples=1000)
? 10
-- OK! --

---------------------------------------------------------------------
Question 9 > Suite 2 > Case 2
(cases remaining: 5)

-- Already unlocked --

---------------------------------------------------------------------
Question 9 > Suite 3 > Case 1
(cases remaining: 4)

>>> from hog import *
>>> dice = make_test_dice(2)     # dice always rolls 2
>>> max_scoring_num_rolls(dice, num_samples=1000)
? 10
-- OK! --

---------------------------------------------------------------------
Question 9 > Suite 3 > Case 2
(cases remaining: 3)

>>> from hog import *
>>> dice = make_test_dice(1, 2)  # dice alternates 1 and 2
>>> max_scoring_num_rolls(dice, num_samples=1000)
? 10
-- Not quite. Try again! --

? 1
-- OK! --

---------------------------------------------------------------------
Question 9 > Suite 3 > Case 3
(cases remaining: 2)

>>> from hog import *
>>> # 100 2s and then 100 1s (don't worry about how this works)
>>> dice = make_test_dice(*([2] * 100 + [1] * 100))
>>> max_scoring_num_rolls(dice, num_samples=1)
? 2
-- Not quite. Try again! --

? 2.0
-- Not quite. Try again! --

? 1
-- Not quite. Try again! --

? 0
-- Not quite. Try again! --

? 10
-- OK! --

---------------------------------------------------------------------
Question 9 > Suite 3 > Case 4
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 9 unlocked.

---------------------------------------------------------------------
Question 10 > Suite 1 > Case 1
(cases remaining: 11)

>>> from hog import *
>>> bacon_strategy(0, 0, margin=8, num_rolls=5)
? 5
-- OK! --

---------------------------------------------------------------------
Question 10 > Suite 1 > Case 2
(cases remaining: 10)

>>> from hog import *
>>> bacon_strategy(70, 64, margin=6, num_rolls=5)
? 8
-- Not quite. Try again! --

? 0
-- OK! --

---------------------------------------------------------------------
Question 10 > Suite 1 > Case 3
(cases remaining: 9)

>>> from hog import *
>>> bacon_strategy(50, 55, margin=5, num_rolls=5)
? 0
-- OK! --

---------------------------------------------------------------------
Question 10 > Suite 1 > Case 4
(cases remaining: 8)

-- Already unlocked --

---------------------------------------------------------------------
Question 10 > Suite 1 > Case 5
(cases remaining: 7)

-- Already unlocked --

---------------------------------------------------------------------
Question 10 > Suite 1 > Case 6
(cases remaining: 6)

-- Already unlocked --

---------------------------------------------------------------------
Question 10 > Suite 2 > Case 1
(cases remaining: 5)

-- Already unlocked --

---------------------------------------------------------------------
Question 10 > Suite 2 > Case 2
(cases remaining: 4)

-- Already unlocked --

---------------------------------------------------------------------
Question 10 > Suite 2 > Case 3
(cases remaining: 3)

-- Already unlocked --

---------------------------------------------------------------------
Question 10 > Suite 2 > Case 4
(cases remaining: 2)

-- Already unlocked --

---------------------------------------------------------------------
Question 10 > Suite 2 > Case 5
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 10 unlocked.

---------------------------------------------------------------------
Question 11 > Suite 1 > Case 1
(cases remaining: 11)

>>> from hog import *
>>> swap_strategy(9, 21, 8, 6)
? 3
-- Not quite. Try again! --

? 0
-- OK! --

---------------------------------------------------------------------
Question 11 > Suite 1 > Case 2
(cases remaining: 10)

>>> from hog import *
>>> swap_strategy(30, 54, 7, 6)
? 0
-- Not quite. Try again! --

? 6
-- OK! --

---------------------------------------------------------------------
Question 11 > Suite 1 > Case 3
(cases remaining: 9)

>>> from hog import *
>>> swap_strategy(7, 44, 8, 6)
? 4
-- Not quite. Try again! --

? 44
-- Not quite. Try again! --

? 6
-- Not quite. Try again! --

? 0
-- OK! --

---------------------------------------------------------------------
Question 11 > Suite 1 > Case 4
(cases remaining: 8)

>>> from hog import *
>>> swap_strategy(51, 40, 1, 6)
? 6
-- OK! --

---------------------------------------------------------------------
Question 11 > Suite 1 > Case 5
(cases remaining: 7)

-- Already unlocked --

---------------------------------------------------------------------
Question 11 > Suite 1 > Case 6
(cases remaining: 6)

-- Already unlocked --

---------------------------------------------------------------------
Question 11 > Suite 1 > Case 7
(cases remaining: 5)

-- Already unlocked --

---------------------------------------------------------------------
Question 11 > Suite 2 > Case 1
(cases remaining: 4)

-- Already unlocked --

---------------------------------------------------------------------
Question 11 > Suite 2 > Case 2
(cases remaining: 3)

-- Already unlocked --

---------------------------------------------------------------------
Question 11 > Suite 2 > Case 3
(cases remaining: 2)

-- Already unlocked --

---------------------------------------------------------------------
Question 11 > Suite 2 > Case 4
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 11 unlocked.

---------------------------------------------------------------------
Question 12 > Suite 1 > Case 1
(cases remaining: 1)

-- Already unlocked --

---------------------------------------------------------------------
OK! All cases for Question 12 unlocked.

ERROR  | auth.py:91 | {'error': 'invalid_grant'}
Performing authentication
Please enter your bCourses email.
bCourses email: Checking for software updates...
OK is up to date

 2018-10-11 02:28:26 ⌚  Marcs-MBP in ~/Documents/cs61afall2018/code/hog
± |master ?:1 ✗| → 
